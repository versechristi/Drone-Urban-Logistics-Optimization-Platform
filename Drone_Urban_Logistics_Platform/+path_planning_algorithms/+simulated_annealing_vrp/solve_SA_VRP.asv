% File: Drone_Urban_Logistics_Platform/+path_planning_algorithms/+simulated_annealing_vrp/solve_SA_VRP.m

function [bestSolution, bestCost, costHistory, intermediateData] = solve_SA_VRP(paramsSA, droneParams, ...
                                                                  locations, demands, numSelectedHubs, ...
                                                                  utils, iterationCheckpoints, outputDirSA)

    % --- BEGIN MODIFICATION: Imports moved inside the function ---
    import path_planning_algorithms.simulated_annealing_vrp.generate_Initial_Solution_SA
    import path_planning_algorithms.simulated_annealing_vrp.generate_Neighbor_Solution_SA
    import path_planning_algorithms.simulated_annealing_vrp.calculate_Total_Cost_SA
    import path_planning_algorithms.simulated_annealing_vrp.visualizer_SA.plot_SA_Route_Snapshot 
    % --- END MODIFICATION ---

% Solves the Multi-Depot Vehicle Routing Problem (MDVRP) using Simulated Annealing.
% (略去原始文件中的注释以节省空间，实际使用时请保留)

    fprintf('\n--- Starting Simulated Annealing for VRP ---\n');
    numCustomers = size(locations, 1) - numSelectedHubs;
    numLocations = size(locations, 1);

    % --- Create Initial Solution ---
    % Calls to functions within the same package, now resolved by 'import' statements above.
    currentSolution = generate_Initial_Solution_SA(numCustomers, numSelectedHubs, paramsSA.MaxIterPerTemp); %
    currentCost = calculate_Total_Cost_SA(currentSolution, locations, demands, droneParams, numSelectedHubs, utils); %

    bestSolution = currentSolution;
    bestCost = currentCost;

    T = paramsSA.InitialTemp;
    totalIter = 0;
    % Estimate total iterations for pre-allocating costHistory
    if paramsSA.Alpha < 1 && paramsSA.InitialTemp > 0 && paramsSA.FinalTemp > 0 && paramsSA.InitialTemp > paramsSA.FinalTemp
        numTempLevels = ceil(log(paramsSA.FinalTemp/paramsSA.InitialTemp)/log(paramsSA.Alpha));
    else
        numTempLevels = 100; % Fallback if alpha indicates no cooling or invalid temps
    end
    maxTotalIterEst = numTempLevels * paramsSA.MaxIterPerTemp * 1.2; % Add a small buffer
    if maxTotalIterEst <= 0 || isinf(maxTotalIterEst) || isnan(maxTotalIterEst)
        maxTotalIterEst = 100000; % Further fallback for extreme parameter values
    end
    costHistory = zeros(ceil(maxTotalIterEst), 1);
    
    intermediateData = struct('Iteration', num2cell(iterationCheckpoints), ...
                              'Solution', cell(1, length(iterationCheckpoints)), ...
                              'Cost', cell(1, length(iterationCheckpoints)), ...
                              'PlotFile', cell(1, length(iterationCheckpoints)), ...
                              'KMLFile', cell(1, length(iterationCheckpoints)));
    checkpointIdx = 1;

    fprintf('Initial Solution Cost: %.2f\n', currentCost);
    if isinf(currentCost) || isnan(currentCost)
        warning('SA:InitialCost', 'Initial SA solution cost is Inf or NaN. Check constraints or initial solution generation.');
    end

    tempLevel = 0;
    % Main SA loop
    while T > paramsSA.FinalTemp && T > 0 && totalIter < ceil(maxTotalIterEst) 
        tempLevel = tempLevel + 1;
        iterSinceLastBest = 0; % Counter for iterations since last improvement (optional, not used for termination here)
        fprintf('SA Temp Level %d: %.4f, Current Cost: %.2f (Best: %.2f)\n', tempLevel, T, currentCost, bestCost);

        for iter = 1:paramsSA.MaxIterPerTemp
            totalIter = totalIter + 1;
            iterSinceLastBest = iterSinceLastBest + 1;

            % Dynamically extend costHistory if needed (should be rare with pre-allocation)
            if totalIter > length(costHistory) 
                costHistory = [costHistory; zeros(paramsSA.MaxIterPerTemp*10, 1)]; % Extend by a chunk
            end

            % Generate and evaluate a neighbor solution
            neighborSolution = generate_Neighbor_Solution_SA(currentSolution, numCustomers, numSelectedHubs, numLocations); %
            neighborCost = calculate_Total_Cost_SA(neighborSolution, locations, demands, droneParams, numSelectedHubs, utils); %

            if isnan(neighborCost)
                fprintf('Warning: SA Neighbor cost is NaN at Total Iter %d. Skipping.\n', totalIter);
                if totalIter > 0, costHistory(totalIter) = bestCost; end 
                continue;
            end

            % Acceptance criterion
            deltaCost = neighborCost - currentCost;
            accept = false;
            if deltaCost < 0
                accept = true; % Always accept improving solutions
            else
                if T > 1e-9 % Avoid division by zero or issues with very low T
                    acceptanceProb = exp(-deltaCost / T);
                    if rand() < acceptanceProb
                        accept = true; % Accept worse solution with some probability
                    end
                else 
                    accept = false; % If temperature is effectively zero, only accept improvements
                end
            end

            if accept
                currentSolution = neighborSolution;
                currentCost = neighborCost;
                if currentCost < bestCost
                    bestSolution = currentSolution;
                    bestCost = currentCost;
                    iterSinceLastBest = 0;
                    fprintf('  -> New SA Best Cost: %.2f at Iter %d (Temp: %.4f)\n', bestCost, totalIter, T);
                end
            end
            if totalIter > 0, costHistory(totalIter) = bestCost; end % Record best cost so far

            % --- Intermediate Result Checkpoint ---
            if checkpointIdx <= length(iterationCheckpoints) && totalIter == iterationCheckpoints(checkpointIdx)
                fprintf('SA: Reached checkpoint at iteration %d. Saving intermediate results.\n', totalIter);
                intermediateData(checkpointIdx).Solution = bestSolution; % Save best solution at checkpoint
                intermediateData(checkpointIdx).Cost = bestCost;
                
                plotFileNameBase = fullfile(outputDirSA, sprintf('plot_sa_routes_iter_%d', totalIter));
                
                % Call imported function directly
                fig_snapshot = plot_SA_Route_Snapshot(bestSolution, locations, numSelectedHubs, demands, droneParams, utils, ... %
                                       sprintf('SA Routes - Iteration %d (Cost: %.2f)', totalIter, bestCost), []); 
                
                if ~isempty(fig_snapshot) && ishandle(fig_snapshot)
                   utils.save_Figure_Properly(fig_snapshot, plotFileNameBase, {'png','fig'}); 
                   close(fig_snapshot); 
                   intermediateData(checkpointIdx).PlotFile = [plotFileNameBase, '.png']; 
                else
                   intermediateData(checkpointIdx).PlotFile = ''; % Record that plot failed or was not generated
                end
                
                % KML saving for intermediate results (currently empty, can be implemented if needed)
                intermediateData(checkpointIdx).KMLFile = ''; 
                                
                checkpointIdx = checkpointIdx + 1;
            end
            
        end % End iterations at current temperature
        T = T * paramsSA.Alpha; % Cool down
        if paramsSA.Alpha >= 1 && tempLevel > 1 % Safety break if alpha is not a cooling factor
            fprintf('Warning: SA Alpha is >= 1. Halting cooling.\n');
            break;
        end
    end % End temperature loop

    % Trim costHistory to actual number of iterations
    if totalIter > 0
        costHistory = costHistory(1:totalIter); 
    else
        costHistory = []; % No iterations were run
    end
    
    % Clean up best solution: remove empty routes or routes that are just depot-to-depot
    if iscell(bestSolution)
        bestSolution = bestSolution(cellfun(@(r) ~isempty(r) && length(r) > 2, bestSolution));
    end

    fprintf('SA Finished. Final Best Cost: %.2f after %d total iterations.\n', bestCost, totalIter);
end